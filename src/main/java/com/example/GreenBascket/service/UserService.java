package com.example.GreenBascket.service;

import com.example.GreenBascket.dto.UserProfileRequestDTO;
import com.example.GreenBascket.dto.UserProfileResponseDTO;
import com.example.GreenBascket.model.User;
import com.example.GreenBascket.repository.UserRepo;
import com.example.GreenBascket.security.UserPrincipal; // Assuming UserPrincipal is updated to handle Long userId
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.security.core.userdetails.UserDetailsService;

import java.util.Collections;
// Remove UUID import as we are no longer manually generating userId

@Service
public class UserService implements UserDetailsService {

    @Autowired
    private UserRepo userRepository;

    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    public User registerUser(User user) {
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new RuntimeException("Email already exists!");
        }

        // REMOVE THIS LINE: user.setUserId(userId); - userId is auto-generated by the database
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user); // The saved user will have the auto-generated Long userId
    }

    public User loginUser(String email, String password) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new BadCredentialsException("Invalid password for user: " + email);
        }

        return user;
    }

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));

        return new UserPrincipal(
                user.getUserId(), // THIS LINE MUST PASS A LONG
                user.getEmail(),
                user.getPassword(),
                Collections.singletonList(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );
    }

    /**
     * Fetches user profile data by userId.
     * @param userId The ID of the user to fetch.
     * @return UserProfileResponseDTO containing relevant user data.
     */
    public UserProfileResponseDTO getUserProfile(Long userId) { // FIX: Change parameter type to Long
        User user = userRepository.findById(userId) // findById expects Long
                .orElseThrow(() -> new UsernameNotFoundException("User not found with ID: " + userId));

        return new UserProfileResponseDTO(
                String.valueOf(user.getUserId()), // Assuming DTO expects String userId
                user.getName(),
                user.getEmail(),
                user.getPhone(),
                user.getLocation(),
                user.getRole()
        );
    }

    /**
     * Updates user profile data.
     * @param userId The ID of the user to update.
     * @param requestDTO UserProfileRequestDTO containing updated fields.
     * @return UserProfileResponseDTO with the updated user data.
     */
    public UserProfileResponseDTO updateUserProfile(Long userId, UserProfileRequestDTO requestDTO) { // FIX: Change parameter type to Long
        User user = userRepository.findById(userId) // findById expects Long
                .orElseThrow(() -> new UsernameNotFoundException("User not found with ID: " + userId));

        user.setName(requestDTO.getName());
        user.setPhone(requestDTO.getPhone());
        user.setLocation(requestDTO.getLocation());

        User updatedUser = userRepository.save(user);

        return new UserProfileResponseDTO(
                String.valueOf(updatedUser.getUserId()), // Assuming DTO expects String userId
                updatedUser.getName(),
                updatedUser.getEmail(),
                updatedUser.getPhone(),
                updatedUser.getLocation(),
                updatedUser.getRole()
        );
    }
}